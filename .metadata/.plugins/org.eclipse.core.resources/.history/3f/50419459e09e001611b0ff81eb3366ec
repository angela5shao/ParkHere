package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.net.Socket;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import resource.MyEntry;
import resource.NetworkPackage;
import resource.ParkingSpot;
import resource.User;

public class ServerCommunicator extends Thread {
	private Socket socket;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	private PrintWriter pw;
	private ServerListener serverListener;
	private AuthManager AM;
	private DatabaseManager DM;

	public ServerCommunicator(Socket socket, ServerListener serverListener) throws IOException {
		this.socket = socket;
		this.serverListener = serverListener;
		this.oos = new ObjectOutputStream(socket.getOutputStream());
		oos.flush();
		this.ois = new ObjectInputStream(socket.getInputStream());
		this.pw = new PrintWriter(socket.getOutputStream());
		this.AM = new AuthManager(DM, this);
	}

	@SuppressWarnings("unchecked")
	public void run() {
		try {
			while (true) {
				Object obj = ois.readObject();
				System.out.println("do receive the networkpackage");
				if (obj instanceof NetworkPackage) {
					NetworkPackage np = (NetworkPackage) obj;
					MyEntry<String, Serializable> entry = np.getCommand();
					String key = entry.getKey();
					Object value = entry.getValue();
					System.out.println("Command Key: " + key);
					NetworkPackage response = new NetworkPackage();
					// To register
					if (key.equals("REGISTER")) {
						System.out.println("Yes, finally get this step");
						
						HashMap<String, Object> map = (HashMap<String, Object>) value;
						
						for(Map.Entry<String, Object> e : map.entrySet())
						{
							System.out.println(e.getKey() + " "+e.getValue());
						}
						
						
//						User user = AM.register();
						
						
						
						
//						System.out.println(user.username);
//						if (user.getID() == -1) {
//							response.addEntry("RF", 1);
//							oos.writeObject(response);
//						} else {
//							int userType = DM.findType(user.getUsername());
//							response.addEntry("USER", user);
//							response.addEntry("USERTYPE", userType);
//							oos.writeObject(response);
//						}
					}
					// To Login
					else if (key.equals("LOGIN")) {
						System.out.println("Yes, finally get this step");
						
						HashMap<String, Object> map = (HashMap<String, Object>) value;
						
						for(Map.Entry<String, Object> e : map.entrySet())
						{
							System.out.println(e.getKey() + " "+e.getValue());
						}
						
//						User user = AM.login((HashMap<String, Object>) value);
//						if (user.getID() == -1) {
//							response.addEntry("LF", 1);
//							oos.writeObject(response);
//						} else {
//							int userType = DM.findType(user.getUsername());
//							response.addEntry("USER", user);
//							response.addEntry("USERTYPE", userType);
//							oos.writeObject(response);
//						}
					}
					// To logout
					else if (key == "LOGOUT") {
						if (AM.logout((HashMap<String, Object>) value)) {
							response.addEntry("LOGOUT", 1);
							oos.writeObject(response);
						} else {
							response.addEntry("LOF", 1);
							oos.writeObject(response);
						}
					} else if (key == "POST_PARKINGSPOT") {

					}
					oos.flush();
//				}
			}

		} catch (IOException |

				ClassNotFoundException | SQLException e) {
			System.out.println("Class Not Found?");
			System.out.println(e.getMessage());
		}

	}
}
